)
1 - pnorm(0.95 / 4)
1 - pnorm(0.95) / 4)
1 - pnorm(0.95) / 4
1 - qnorm(0.95) / 4
1 - (qnorm(0.95) / 4)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) *
1 - (qnorm(0.95) / 4)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
1 - ((k - u) / 4)
# \mu
u <- seq(0, 5, 0.5)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
1 - ((k - u) / 4)
power <- 1 - ((k - u) *sqrt(4))
plot(u, power)
power <- 1 - ((k - u) *sqrt(10))
plot(u, power)
power <- 1 - ((k - u) *sqrt(4))
plot(u, power)
norm(0.95)
1norm(0.95)
qnorm(0.95)
((k - u) *sqrt(4))
pnorm(((k - u) *sqrt(4)))
power <- 1 - pnorm(((k - u) *sqrt(4)))
library(ggplot2)
# \mu
u <- seq(0, 5, 0.5)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(4)))
plot(u, power)
library(ggplot2)
# \mu
u <- seq(0, 5, 0.5)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(10)))
plot(u, power)
library(ggplot2)
# \mu
u <- seq(0, 5, 0.5)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(4)))
plot(u, power)
library(ggplot2)
# \mu
u <- seq(0, 2, 0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(4)))
plot(u, power)
ggplot() + aes(x = u, y = power) + geom_line()
library(ggplot2)
# \mu
u <- seq(-1, 2, 0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(4)))
plot(u, power)
ggplot() + aes(x = u, y = power) + geom_line()
power4 <- 1 - pnorm(((k - u) *sqrt(4)))
power4 <- 1 - pnorm(((k - u) *sqrt(4)))plot(u, power)
power4 <- 1 - pnorm(((k - u) *sqrt(4)))
power4 <- 1 - pnorm(((k - u) *sqrt(4)))
library(ggplot2)
# \mu
u <- seq(-1, 2, 0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power1 <- 1 - pnorm(((k - u) *sqrt(1)))
power4 <- 1 - pnorm(((k - u) *sqrt(4)))
power16 <- 1 - pnorm(((k - u) *sqrt(16)))
power64<- 1 - pnorm(((k - u) *sqrt(64)))
power100 <- 1 - pnorm(((k - u) *sqrt(100)))
#plot(u, power)
ggplot() + aes(x = u, y = power1) + geom_line() + geom_line(aes(x = u, power = power4))
ggplot() +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, power = power4))
powerN <- cbind(u, power1, power4, power16, power64, power100)
powerN
ggplot(powerN) +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, power = power4))
#plot(u, power)
class(powerN)
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplot(powerN) +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, power = power4))
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, power = power4))
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, y = power4))
ggplot(powerN,aes(x = u, y = power1)) +  geom_line() + geom_line(aes(x = u, y = power4))
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange")
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow")
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green")
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue")
library(ggplot2)
library(plotly)
# \mu
u <- seq(-1, 2, 0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power1 <- 1 - pnorm(((k - u) * sqrt(1)))
power4 <- 1 - pnorm(((k - u) * sqrt(4)))
power16 <- 1 - pnorm(((k - u) * sqrt(16)))
power64 <- 1 - pnorm(((k - u) * sqrt(64)))
power100 <- 1 - pnorm(((k - u) * sqrt(100)))
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplotly(ggplot(powerN, aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue"))
k1 <- qnorm(0.95)
k1 <- qnorm(0.95)power1 <- 1 - pnorm(((k - u) * sqrt(1)))
library(ggplot2)
library(plotly)
# \mu
u <- seq(-1, 2, 0.05)
# std normal for mean 0 and sigma = 1
k1 <- qnorm(0.95) / sqrt(1)
k4 <- qnorm(0.95)/ sqrt(4)
k16 <- qnorm(0.95) / sqrt(16)
k64 <- qnorm(0.95) / sqrt(64)
k100 <- qnorm(0.95) / sqrt(100)
power1 <- 1 - pnorm(((k1 - u) * sqrt(1)))
power4 <- 1 - pnorm(((k4 - u) * sqrt(4)))
power16 <- 1 - pnorm(((k16 - u) * sqrt(16)))
power64 <- 1 - pnorm(((k64 - u) * sqrt(64)))
power100 <- 1 - pnorm(((k100 - u) * sqrt(100)))
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplotly(ggplot(powerN, aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue"))
library(ggplot2)
library(plotly)
# \mu
u <- seq(-1, 4, 0.05)
# std normal for mean 0 and sigma = 1
k1 <- qnorm(0.95) / sqrt(1)
k4 <- qnorm(0.95)/ sqrt(4)
k16 <- qnorm(0.95) / sqrt(16)
k64 <- qnorm(0.95) / sqrt(64)
k100 <- qnorm(0.95) / sqrt(100)
power1 <- 1 - pnorm(((k1 - u) * sqrt(1)))
power4 <- 1 - pnorm(((k4 - u) * sqrt(4)))
power16 <- 1 - pnorm(((k16 - u) * sqrt(16)))
power64 <- 1 - pnorm(((k64 - u) * sqrt(64)))
power100 <- 1 - pnorm(((k100 - u) * sqrt(100)))
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplotly(ggplot(powerN, aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue"))
# two sided test
k1 <- (qnorm(0.975) / sqrt(1)) - (qnorm(0.025)/sqrt(1))
k4 <-(qnorm(0.975) / sqrt(4)) - (qnorm(0.025)/sqrt(4))
k16 <- (qnorm(0.975) / sqrt(16)) - (qnorm(0.025)/sqrt(16))
k64 <- (qnorm(0.975) / sqrt(64)) - (qnorm(0.025)/sqrt(64))
k100 <- (qnorm(0.975) / sqrt(100)) - (qnorm(0.025)/sqrt(100))
power1 <- 1 - pnorm(((k1 - u) * sqrt(1)))
power4 <- 1 - pnorm(((k4 - u) * sqrt(4)))
power16 <- 1 - pnorm(((k16 - u) * sqrt(16)))
power64 <- 1 - pnorm(((k64 - u) * sqrt(64)))
power100 <- 1 - pnorm(((k100 - u) * sqrt(100)))
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplotly(ggplot(powerN, aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue"))
library(lme4)
;ibrary(ggplot2)
data(ChickWeight)
force(ChickWeight)
head(ChickWeight)
# (a). (Type your code in the space below, if any)
summary(ChickWeight)
table(ChickWeight$Chick)
table(ChickWeight$Chick)
# (a). (Type your code in the space below, if any)
summary(ChickWeight)
attributes(ChickWeight)
?ChickWeight
# (a). (Type your code in the space below, if any)
summary(ChickWeight)
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, color = Diet)) + geom_curve()
library(lme4)
library(ggplot2)
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, color = Diet)) + geom_curve()
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, color = Diet)) + geom_line()
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, group= Chick, color = Diet)) + geom_line()
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, group= Chick, color = Diet)) + geom_line(color = c("black", "red", "green", "blue"))
ChickWeight
View(ChickWeight)
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, group= Chick, color = Diet)) + geom_line() + scale_color_manual(values = c("black", "red", "green", "blue"))
library(plotly)
# (b). (Type your code in the space below, if any)
ggplotly(ggplot(data = ChickWeight, aes(x = Time, y = weight, group= Chick, color = Diet)) + geom_line() + scale_color_manual(values = c("black", "red", "green", "blue")))
# (c). (Type your code in the space below, if any)
chick.day20 <- ChickWeight[,ChickWeight$Time == 20]
# (c). (Type your code in the space below, if any)
chick.day20 <- ChickWeight[ChickWeight$Time == 20,]
chick.day20
aov(weight ~ Diet, data = chick.day20)
mod1 <_ aov(weight ~ Diet, data = chick.day20)
mod1 <- aov(weight ~ Diet, data = chick.day20)
summary(mod1)
summary(mod1)
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mode1)
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mod1)
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mod1, whcih = c(2,4))
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mod1, which = c(2,4))
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mod1, which = c(2,5))
# (e). (Type your code in the space below, if any)
unique(ChickWeight$Time)
aov(weight ~ Time*Diet, data = chick.day20)
summary(mod2)
# (e). (Type your code in the space below, if any)
unique(ChickWeight$Time)
mod2 <- aov(weight ~ Time*Diet, data = chick.day20)
summary(mod2)
summary(mod2)
anova(mod2)
anova(mod2)
mod2 <- aov(weight ~ Time:Diet, data = chick.day20)
anova(mod2)
mod2 <- aov(weight ~ Time*Diet, data = chick.day20)
anova(mod2)
mod2 <- aov(weight ~ Time + Diet, data = chick.day20)
anova(mod2)
summary(mod1)
mod1 <- aov(weight ~ Diet, data = chick.day20)
summary(mod1)
mod2 <- aov(weight ~ Time + Diet, data = chick.day20)
anova(mod2)
mod2 <- aov(weight ~ Time + Diet, data = ChickWeight)
mod2 <- aov(weight ~ Time * Diet, data = ChickWeight)
anova(mod2)
# (e). (Type your code in the space below, if any)
length(unique(ChickWeight$Time))
# (f). (Type your code in the space below, if any)
mod3 <- lmer(weight ~ Time * Diet + (1|Chick))
# (f). (Type your code in the space below, if any)
mod3 <- lmer(weight ~ Time * Diet + (1|Chick), data = ChickWeight)
mod3
mod2 <- aov(weight ~ as.factor(Time) * Diet, data = ChickWeight)
anova(mod2)
# (f). (Type your code in the space below, if any)
mod3 <- lmer(weight ~ Time * Diet + (1|Chick), data = ChickWeight)
summary(mod3)
mod2.red <- aov(weight ~ as.factor(Time) + Diet, data = ChickWeight)
anova(mod2, mod2.red)
# (f). (Type your code in the space below, if any)
mod3 <- lmer(weight ~ Time * Diet + (1|Chick), data = ChickWeight)
summary(mod3)
mod3.other <- lmer(weight ~ Time * Diet + (1 + Time|Chick), data = ChickWeight)
summary(mode.other)
summary(mod3.other)
setwd("C:/Users/Gianni/Documents/Github/MStats/STA144/Homework/HW1")
samp
samp <- c(15, 34, 35, 36, 11, 17, 36, 15)
samp
permutations(n = 8, r = 3, v = samp, repeats.allowed = T)
library(gtools)
permutations(n = 8, r = 3, v = samp, repeats.allowed = T)
permutations(n = 8, r = 3, v = samp, repeats.allowed = T)
gtools:permutations(n = 8, r = 3, v = samp, repeats.allowed = T)
library(gtools)
gtools:permutations(n = 8, r = 3, v = samp, repeats.allowed = T)
gtools::permutations(n = 8, r = 3, v = samp, repeats.allowed = T)
?permutations
gtools::permutations(n = len(samp), r = 3, v = samp, repeats.allowed = T)
gtools::permutations(n = length(samp), r = 3, v = samp, repeats.allowed = T)
permutations(n = length(samp), r = 3, v = samp, repeats.allowed = T)
permutations(n = length(samp), r = 3, v = samp, repeats.allowed = T)
samp <- c(15, 34, 35, 36, 11, 17, 36, 15)
samp
permutations(n = length(samp), r = 3, v = samp, repeats.allowed = T)
expand.grid(samp, samp, samp)
sampWReplace <- expand.grid(samp, samp, samp)
rowsum(sampWReplace)
rowSum(sampWReplace)
rowsum.data.frame(sampWReplace)
rowSums(sampWReplace)
rowSums(sampWReplace)
# We will 8^3 possibilities, 512
sampWReplace
# We will 8^3 possibilities, 512
sampWReplace
---
title: "Homework 1"
author: "Gianni Spiga"
date: '2023-04-11'
output:
html_document:
df_print: paged
theme: flatly
---
samp <- c(15, 34, 35, 36, 11, 17, 36, 15)
samp <- c(15, 34, 35, 36, 11, 17, 36, 15)
samp
sampWReplace <- expand.grid(samp, samp, samp)
# We will 8^3 possibilities, 512
sampWReplace
rowSums(sampWReplace)
samp
sampWReplace <- expand.grid(samp, samp, samp)
# We will 8^3 possibilities, 512
sampWReplace
# Now we find all possible, *unique*, sums
unique(rowSums(sampWReplace))
unique(Tsums)
samp <- c(15, 34, 35, 36, 11, 17, 36, 15)
sampWReplace <- expand.grid(samp, samp, samp)
# We will 8^3 possibilities, 512
# Now we find all possible, *unique*, sums
Tsums <- rowSums(sampWReplace)
unique(Tsums)
# sampling distribution of T
table(Tsums) / nrow(Tsums)
# sampling distribution of T
table(Tsums) / length(Tsums)
combn(samp, m = 3)
combn(samp, m = 3).T
t(combn(samp, m = 3))
sampWOReplace <- t(combn(samp, m = 3))
sampWOReplace <- t(combn(samp, m = 3))
TsumsNoRep <- rowSums(sampWOReplace)
# sampling distribution of T w/o replacement
table(TsumsNoRep) / length(TsumsNoRep)
attributes(table(Tsums))
table(Tsums)$dimnames
attr(table(Tsums), "dimnames")
c(attr(table(Tsums), "dimnames"))
c(attr(table(Tsums), "dimnames")$Tsums)
as.numeric(ttr(table(Tsums), "dimnames")$Tsums)
as.numeric((table(Tsums), "dimnames")$Tsums)
as.numeric(attr(table(Tsums), "dimnames")$Tsums)
as.numeric(attr(table(Tsums), "dimnames")$Tsums) * table(Tsums)
table(Tsums)
as.numeric(attr(table(Tsums), "dimnames")$Tsums) * (table(Tsums) / length(Tsums))
sum(as.numeric(attr(table(Tsums), "dimnames")$Tsums) * (table(Tsums) / length(Tsums)))
mean(Tsums)
var(Tsums)
var(TsumsNoRep)
# For without replacement
mean(TsumsNoRep)
var(TsumsNoRep)
pubFac <- data.frame(
"PrefPubl" = rep(0:10)
)
pubFac
pubFac <- data.frame(
"PrefPubl" = rep(0:10),
"FacultyMemb" = c(28, 4, 3, 4, 4, 2, 1, ,0, 2,1,1)
)
pubFac <- data.frame(
"PrefPubl" = rep(0:10),
"FacultyMemb" = c(28, 4, 3, 4, 4, 2, 1 ,0, 2,1,1)
)
pubFac
ggplot(data = pubFac, aes(x = "PrefPubl", y = "FacultyMemb")) + geom_histogram
ggplot(data = pubFac, aes(x = "PrefPubl", y = "FacultyMemb")) + geom_histogram()
library(ggplot2)
ggplot(data = pubFac, aes(x = "PrefPubl", y = "FacultyMemb")) + geom_histogram()
ggplot(data = pubFac, aes(x = "PrefPubl", y = "FacultyMemb")) + geom_histogram(stat = "identity")
str(pubFac)
ggplot(data = pubFac, aes(x = "PrefPubl", y = "FacultyMemb")) + geom_bar(stat = "identity")
ggplot(data = pubFac, aes(x = "PrefPubl", y = "FacultyMemb")) + geom_bar()
pubFac
library(ggplot2)
hist(rep(pubFac$PrefPubl,pubFac$FacultyMemb))
# Expected value with replacement
sum(as.numeric(attr(table(Tsums), "dimnames")$Tsums) * (table(Tsums) / length(Tsums)))
# Or you can just do this
mean(Tsums)
var(Tsums)
# For without replacement
mean(TsumsNoRep)
var(TsumsNoRep)
hist(rep(pubFac$PrefPubl,pubFac$FacultyMemb))
rep(pubFac$PrefPubl,pubFac$FacultyMemb)
mean(long_dat)
long_dat <- rep(pubFac$PrefPubl,pubFac$FacultyMemb)
mean(long_dat)
sqrt(var(long_dat))
sqrt(var(long_dat) / 50) * (1 - 50/807)
sqrt(var(long_dat) / 50) * (1 - 50/807))
sqrt((var(long_dat) / 50) * (1 - 50/807))
long_dat <- rep(pubFac$PrefPubl,pubFac$FacultyMemb)
mean(long_dat)
sqrt((var(long_dat) / 50) * (1 - 50/807))
sePhat <- sqrt( ((807 - 50) / (807 - 1)) * ((phat) * (1 - phat) / 50))
phat <- 28/50
sePhat <- sqrt( ((807 - 50) / (807 - 1)) * ((phat) * (1 - phat) / 50))
# 95 % CI
c(phat - 1.96 * sePhat. phat + 1.96 * sePhat)
# 95 % CI
c(phat - 1.96 * sePhat, phat + 1.96 * sePhat)
pubFac <- data.frame("PrefPubl" = rep(9:20),
"FacultyMemb" = c(13, 35, 44, 69, 36, 24, 7 , 3, 2, 5, 1, 1))
child <- data.frame("PrefPubl" = rep(9:20),
"FacultyMemb" = c(13, 35, 44, 69, 36, 24, 7 , 3, 2, 5, 1, 1))
child <- data.frame("Age" = rep(9:20),
"Children" = c(13, 35, 44, 69, 36, 24, 7 , 3, 2, 5, 1, 1))
hist(rep(child$Age,child$Children))
child <- data.frame("Age" = rep(9:20),
"Children" = c(13, 35, 44, 69, 36, 24, 7 , 3, 2, 5, 1, 1))
hist(rep(child$Age,child$Children))
mean(hist(rep(child$Age,child$Children)))
mean(rep(child$Age,child$Children))
#SE (ignore FPC, since we do not know population size)
se.age <- sqrt((var(rep(child$Age,child$Children)) / 240))
se.age
# 95% CI for mean
c(mean.age - 1.96 * se.age, mean.age + 1.96 * se.age)
# Mean
mean.age <- mean(rep(child$Age,child$Children))
mean.age
#SE (ignore FPC, since we do not know population size)
se.age <- sqrt((var(rep(child$Age,child$Children)) / 240))
se.age
# 95% CI for mean
c(mean.age - 1.96 * se.age, mean.age + 1.96 * se.age)
# From page 47 (pdf 60) 2nd ed
n_desire <- (1.96)^2 * var(rep(child$Age,child$Children)) / (0.5^2)
n_desire
round(n_desire)
golfsrs <- read.csv("~/Github/MStats/STA144/Homework/HW1/golfsrs.csv")
View(golfsrs)
head(golfsrs)
hist(golfsrs$wkday9)
mean(golfsrs$wkday9)
hist(golfsrs$wkday9)
var(golfsrs$wkday9)
sqrt(var(golfsrs$wkday9) / 120 * (1 - 120/14938))
sqrt(var(golfsrs$wkday9) / 120 * (1 - 120/14938))
mean(golfsrs$wkday9)
sqrt(var(golfsrs$wkday9) / 120 * (1 - 120/14938))
mean(golfsrs$wkday9)
mean(golfsrs$wkday9)
sqrt(var(golfsrs$wkday9) / 120 * (1 - 120/14938))
head(golfsrs)
hist(golfsrs$wkday9)
## b.)
```{r}
# sampling distribution of T
table(Tsums) / length(Tsums)
# Loading in the data
#load("./ICPSR_38090/DS0003/38090-0003-Data.rda")
df <- data.frame(
id = c(10,11,12,13,14,15,16,17),
name = c('sai','ram','deepika','sahithi','kumar','scott','Don','Lin'),
gender = c('M','M','F','F','M','M','M','F'),
dob = as.Date(c('1990-10-02','1981-3-24','1987-6-14','1985-8-16',
'1995-03-02','1991-6-21','1986-3-24','1990-8-26')),
state = c('CA','NY',NA,NA,'DC','DW','AZ','PH'),
"Do they like French Fries?" = c("Y", "Y", "N", NA, 'Y', 'N', 'Y', 'N')
)
attr(df, "variable.labels") = names(df)
names(df) <- c("V100", "V101", "V102", "V103", "V104", "V105")
View(df)
df.red <- df[,c(1,3,6)]
library(xtable)
xtable(df.red)
#View(df.red)
attributes(df)
labels <- attr(df, "variable.labels")
names(labels) <- names(df)
#labels.red <- labels[c(1,3,6)]
#labels.list <- c((strsplit(labels, split = "'"))[c(1,3,6)])
class(labels.red)
class(labels)
library(Hmisc)
library(Hmisc)
df.new <- upData(df.red, labels = labels)
#df.red <- df[,c(1,3,6)]
View(df.new)
attributes(df.new)
attributes(df.new$V100)
attributes(df.new$V300)
attributes(df.new$V105)
attributes(df.new)
# $names
# [1] "V100" "V102" "V105"
#
# $row.names
# [1] 1 2 3 4 5 6 7 8
#
# $class
# [1] "data.frame"
attributes(df.new$V105)
2/7 - 3/8
(2/7 - 3/8) * 3/8
((2/7 - 3/8) * 3/8) / (15/64)
