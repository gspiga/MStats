ybar_r <- sum_ti / Mi
ybar_r
# Estimated variance to find std error
sum((journal$nonprob - ybar_r*Mi)^2) / (nrow(journal) - 1)
ybar_r*Mi
# Estimated variance to find std error
sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1)
N_acc <- 828
n_acc <- 85
acc <- data.frame("Errors" = c(0,1,2,3,4), "Freq" = c(57,22,4,1,1))
acc
states <- read.csv("statepps.csv")
states
### For land area
set.seed(144)
cumsumm_states <- cumsum(states$landarea)
# Create range, LB and UB
range_df <- data.frame(cumsumm_states -(states$landarea - 1), cumsumm_states)
# Sample with replacement
states_samp <- sample(1:sum(states$landarea), size = 10, replace = TRUE)
#states_samp
samp_clust <- c()
for (i in 1:10){
x <- which(states_samp[i] > range_df[,1] & states_samp[i] < range_df[,2])
samp_clust <- c(samp_clust, x)
}
# These are our chosen samples
states[samp_clust,]
#psi_i
psi_vector <- states$landarea / sum(states$landarea)
psi_vector
psi_vector[samp_clust]
runif
runif(10)
states <- read.csv("statepps.csv")
states
### For land area
set.seed(123)
cumsumm_states <- cumsum(states$landarea)
# Create range, LB and UB
range_df <- data.frame(cumsumm_states -(states$landarea - 1), cumsumm_states)
# Sample with replacement
states_samp <- sample(1:sum(states$landarea), size = 10, replace = TRUE)
#states_samp
samp_clust <- c()
for (i in 1:10){
x <- which(states_samp[i] > range_df[,1] & states_samp[i] < range_df[,2])
samp_clust <- c(samp_clust, x)
}
# These are our chosen samples
states[samp_clust,]
#psi_i
psi_vector <- states$landarea / sum(states$landarea)
psi_vector
### For population
set.seed(144)
cumsumm_states <- cumsum(states$pop2019)
# Create range, LB and UB
range_df <- data.frame(cumsumm_states -(states$pop2019 - 1), cumsumm_states)
# Sample with replacement
states_samp <- sample(1:sum(states$pop2019), size = 10, replace = TRUE)
#states_samp
samp_clust <- c()
for (i in 1:10){
x <- which(states_samp[i] > range_df[,1] & states_samp[i] < range_df[,2])
samp_clust <- c(samp_clust, x)
}
# These are our chosen samples
states[samp_clust,]
#psi_i
psi_vector <- states$pop2019 / sum(states$pop2019)
psi_vector
psi_vector[samp_clust]
### For population
set.seed(123)
cumsumm_states <- cumsum(states$pop2019)
# Create range, LB and UB
range_df <- data.frame(cumsumm_states -(states$pop2019 - 1), cumsumm_states)
# Sample with replacement
states_samp <- sample(1:sum(states$pop2019), size = 10, replace = TRUE)
#states_samp
samp_clust <- c()
for (i in 1:10){
x <- which(states_samp[i] > range_df[,1] & states_samp[i] < range_df[,2])
samp_clust <- c(samp_clust, x)
}
# These are our chosen samples
states[samp_clust,]
#psi_i
psi_vector <- states$pop2019 / sum(states$pop2019)
psi_vector[samp_clust]
### For population
set.seed(456)
cumsumm_states <- cumsum(states$pop2019)
# Create range, LB and UB
range_df <- data.frame(cumsumm_states -(states$pop2019 - 1), cumsumm_states)
# Sample with replacement
states_samp <- sample(1:sum(states$pop2019), size = 10, replace = TRUE)
#states_samp
samp_clust <- c()
for (i in 1:10){
x <- which(states_samp[i] > range_df[,1] & states_samp[i] < range_df[,2])
samp_clust <- c(samp_clust, x)
}
# These are our chosen samples
states[samp_clust,]
#psi_i
psi_vector <- states$pop2019 / sum(states$pop2019)
psi_vector[samp_clust]
# True value
sum(states$counties)
that_psi = 1/10 * sum(states[samp_clust,]$counties / psi_vector[samp_clust])
ceiling(that_psi)
est_var_that_psi= (1 /10) * (1/9) *sum((states[samp_clust,]$counties / psi_vector[samp_clust] - that_psi)^2)
sqrt(est_var_that_psi)
# True value
sum(states$counties)
ceiling(that_psi)
### For population
set.seed(144)
### For population
set.seed(144)
cumsumm_states <- cumsum(states$pop2019)
# Create range, LB and UB
range_df <- data.frame(cumsumm_states -(states$pop2019 - 1), cumsumm_states)
# Sample with replacement
states_samp <- sample(1:sum(states$pop2019), size = 10, replace = TRUE)
#states_samp
samp_clust <- c()
for (i in 1:10){
x <- which(states_samp[i] > range_df[,1] & states_samp[i] < range_df[,2])
samp_clust <- c(samp_clust, x)
}
# These are our chosen samples
states[samp_clust,]
#psi_i
psi_vector <- states$pop2019 / sum(states$pop2019)
psi_vector[samp_clust]
that_psi = 1/10 * sum(states[samp_clust,]$counties / psi_vector[samp_clust])
ceiling(that_psi)
est_var_that_psi= (1 /10) * (1/9) *sum((states[samp_clust,]$counties / psi_vector[samp_clust] - that_psi)^2)
sqrt(est_var_that_psi)
# True value
sum(states$counties)
### For population
set.seed(123)
cumsumm_states <- cumsum(states$pop2019)
# Create range, LB and UB
range_df <- data.frame(cumsumm_states -(states$pop2019 - 1), cumsumm_states)
# Sample with replacement
states_samp <- sample(1:sum(states$pop2019), size = 10, replace = TRUE)
#states_samp
samp_clust <- c()
for (i in 1:10){
x <- which(states_samp[i] > range_df[,1] & states_samp[i] < range_df[,2])
samp_clust <- c(samp_clust, x)
}
# These are our chosen samples
states[samp_clust,]
#psi_i
psi_vector <- states$pop2019 / sum(states$pop2019)
psi_vector[samp_clust]
that_psi = 1/10 * sum(states[samp_clust,]$counties / psi_vector[samp_clust])
ceiling(that_psi)
est_var_that_psi= (1 /10) * (1/9) *sum((states[samp_clust,]$counties / psi_vector[samp_clust] - that_psi)^2)
sqrt(est_var_that_psi)
# True value
sum(states$counties)
### For population
set.seed(456)
cumsumm_states <- cumsum(states$pop2019)
# Create range, LB and UB
range_df <- data.frame(cumsumm_states -(states$pop2019 - 1), cumsumm_states)
# Sample with replacement
states_samp <- sample(1:sum(states$pop2019), size = 10, replace = TRUE)
#states_samp
samp_clust <- c()
for (i in 1:10){
x <- which(states_samp[i] > range_df[,1] & states_samp[i] < range_df[,2])
samp_clust <- c(samp_clust, x)
}
# These are our chosen samples
states[samp_clust,]
#psi_i
psi_vector <- states$pop2019 / sum(states$pop2019)
psi_vector[samp_clust]
that_psi = 1/10 * sum(states[samp_clust,]$counties / psi_vector[samp_clust])
ceiling(that_psi)
est_var_that_psi= (1 /10) * (1/9) *sum((states[samp_clust,]$counties / psi_vector[samp_clust] - that_psi)^2)
sqrt(est_var_that_psi)
# True value
sum(states$counties)
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
set.seed(456)
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
set.seed(456)
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
set.seed(456)
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
set.seed(111)
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
set.seed(111)
# Let's see Tom's SRS
tom_samp <- sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
# Let's see Tom's SRS
tom_samp <- #sample(1:nrow(states), size = 10, replace = FALSE)
tom_samp <- samp_clust
tom_total <- nrow(states) / 10 * sum(states[tom_samp,]$counties)
tom_total
se_tom = 51* sqrt((1 - 10/51) * var(states[tom_samp,]$counties) / 10)
se_tom
journal <- read.csv("journal.csv")
journal
sum_ti <- sum(journal$nonprob)
sum_ti
sum_Mi <- sum(journal$numemp)
ybar_r <- sum_ti / sum_Mi
ybar_r
# Estimated variance to find std error
sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1)
# Estimated variance to find std error
sqrt(sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1))
journal <- read.csv("journal.csv")
journal
sum_ti <- sum(journal$nonprob)
sum_ti
sum_Mi <- sum(journal$numemp)
ybar_r <- sum_ti / sum_Mi
ybar_r
# Estimated variance to find std error
sqrt(sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1))
journal <- read.csv("journal.csv")
journal
sum_ti <- sum(journal$nonprob)
sum_ti
sum_Mi <- sum(journal$numemp)
ybar_r <- sum_ti / sum_Mi
ybar_r
# Estimated variance to find std error
sqrt(sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1))
journal <- read.csv("journal.csv")
journal
sum_ti <- sum(journal$nonprob)
sum_ti
sum_Mi <- sum(journal$numemp)
ybar_r <- sum_ti / sum_Mi
ybar_r
# Estimated variance to find std error
sqrt(sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1)))
# Estimated variance to find std error
sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1))
# Estimated variance to find std error
sum((journal$nonprob - ybar_r*journal$numemp)^2)) / (nrow(journal) - 1)
journal <- read.csv("journal.csv")
journal
sum_ti <- sum(journal$nonprob)
sum_ti
sum_Mi <- sum(journal$numemp)
ybar_r <- sum_ti / sum_Mi
ybar_r
# Estimated variance to find std error
sum((journal$nonprob - ybar_r*journal$numemp)^2)) / (nrow(journal) - 1)
# Estimated variance to find std error
sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1)
# Estimated variance to find std error
sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1)
# Estimated variance to find std error
sqrt(sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1))
# Estimated variance to find std error
var_j <- sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1))
# Estimated variance to find std error
var_j <- sum((journal$nonprob - ybar_r*journal$numemp)^2) / (nrow(journal) - 1)
var_j
sqrt((1 - 26/1285) * 1/26*(5.69^2) * var_j)
sqrt((1 - 26/1285) * 1/(26*(5.69^2)) * var_j)
measles <- read.csv("measles.csv")
measles
measles %>% group_by(school) %>% summarise(returnf = sum)
measles %>% mutate(returnf, replace(9, 0))
library(dplyr)
measles %>% mutate(returnf, replace(9, 0))
measles %>% mutate(returnf, 9, 0)
measles %>% mutate(returnf = replace(9, 0))
measles %>% mutate(returnf = replace(returnf, 9, 0))
measles %>% mutate(returnf = replace(returnf, returnf == 9, 0))
table(measles$school, measles$returnf)
measles <- measles %>% mutate(returnf = replace(returnf, returnf == 9, 0))
table(measles$school, measles$returnf)
measles
measles %>% group_by(school) %>% summarise_each()
measles %>% group_by(school) %>% summarise_each(list(sum))
#table(measles$school, measles$returnf)
meas_sum <- measles %>% group_by(school) %>% summarise_each(list(sum))
measles <- read.csv("measles.csv")
measles
library(dplyr)
measles <- measles %>% mutate(returnf = replace(returnf, returnf == 9, 0))
#table(measles$school, measles$returnf)
meas_sum <- measles %>% group_by(school) %>% summarise_each(list(sum))
meas_sum
table(measles$school, measles$returnf)
table(measles$school, measles$returnf)[,1]
colSums(table(measles$school, measles$returnf))
rowSums(table(measles$school, measles$returnf))
meas_tab[,1] / rowSums(meas_tab)
meas_tab <- table(measles$school, measles$returnf)
meas_tab[,1] / rowSums(meas_tab)
rowSums(meas_tab)
measles
meas_tab
measles
table(measles$school)
meas_tab
meas_tab[,1] / rowSums(meas_tab)
measles <- read.csv("measles.csv")
measles
library(dplyr)
#measles <- measles %>% mutate(returnf = replace(returnf, returnf == 9, 0))
#table(measles$school, measles$returnf)
meas_sum <- measles %>% group_by(school) %>% summarise_each(list(sum))
meas_sum
meas_tab <- table(measles$school, measles$returnf)
meas_tab[,1] / rowSums(meas_tab)
#measles <- measles %>% mutate(returnf = replace(returnf, returnf == 9, 0))
measles <- measles %>% filter(returnf != 9)
measles <- read.csv("measles.csv")
measles
library(dplyr)
#measles <- measles %>% mutate(returnf = replace(returnf, returnf == 9, 0))
measles <- measles %>% filter(returnf != 9)
#table(measles$school, measles$returnf)
meas_sum <- measles %>% group_by(school) %>% summarise_each(list(sum))
meas_sum
meas_tab <- table(measles$school, measles$returnf)
meas_tab[,1] / rowSums(meas_tab)
measles
meas_sum
table(measles$school, measles$form)
meas_tab[,1] / rowSums(meas_tab)
meas_tab[,1] #/ rowSums(meas_tab)
meas_tab <- table(measles$school, measles$returnf)
means_tab
meas_tab
meas_tab[,1] #/ rowSums(meas_tab)
meas_tab
meas_tab[,1] #/ rowSums(meas_tab)
meas_tab[,0] #/ rowSums(meas_tab)
meas_tab[,2] #/ rowSums(meas_tab)
meas_tab[,2] / rowSums(meas_tab)
measles <- read.csv("measles.csv")
measles
library(dplyr)
#measles <- measles %>% mutate(returnf = replace(returnf, returnf == 9, 0))
measles <- measles %>% filter(returnf != 9)
#table(measles$school, measles$returnf)
meas_sum <- measles %>% group_by(school) %>% summarise_each(list(sum))
meas_sum
meas_tab <- table(measles$school, measles$returnf)
meas_tab[,2] / rowSums(meas_tab)
measles
cumsum(measles$Mitotal)
table(measles$Mitotal)
table(measles$Mitotal, measles$school)
# ti = sum Mi/mi yij = Mi ybar_i
unique(measles$Mitotal)
meas_tab[,2] / rowSums(meas_tab)
#ybar hat
ybh <- meas_tab[,2] / rowSums(meas_tab)
ybh
# ti = sum Mi/mi yij = Mi ybar_i
unique(measles$Mitotal) * ybh
ybh_r <- sum(ti) / sum(unique(measles$Mitotal))
ybh_r
sum(unique(measles$Mitotal))
sum(ti)
# ti = sum Mi/mi yij = Mi ybar_i
ti <- unique(measles$Mitotal) * ybh
ybh_r <- sum(ti) / sum(unique(measles$Mitotal))
ybh_r
unique(measles$mi)
#measles <- measles %>% mutate(returnf = replace(returnf, returnf == 9, 0))
measles <- measles %>% filter(returnf != 9)
unique(measles$mi)
measles$mi
table(measles$school, measles$mi)
rowSums(meas_tab)
wij <- Movm * Novn
# ti = sum Mi/mi yij = Mi ybar_i
ti <- unique(measles$Mitotal) * ybh
ybh_r <- sum(ti) / sum(unique(measles$Mitotal))
ybh_r
# Mi/mi
Movm = unique(measles$Mitotal) / rowSums(meas_tab)
#N/n = 46/10
Novn <-  46/10
wij <- Movm * Novn
wij
# ti = sum Mi/mi yij = Mi ybar_i
#ti <- unique(measles$Mitotal) * ybh
#ybh_r <- sum(ti) / sum(unique(measles$Mitotal))
#ybh_r
# Mi/mi
Movm = unique(measles$Mitotal) / rowSums(meas_tab)
#N/n = 46/10
Novn <-  46/10
wij <- Movm * Novn
wij
Mbar =  sum(unique(measles$Mitotal)) / nrow(unique(measles$Mitotal))
Mbar
Mbar <-  sum(unique(measles$Mitotal)) / nrow(unique(measles$Mitotal))
Mbar
nrow(unique(measles$Mitotal))
Mbar <-  sum(unique(measles$Mitotal)) / length(unique(measles$Mitotal))
Mbar
si
si <- sum(ti - unique(measles$Mitotal))
si
si <- sum((ti - unique(measles$Mitotal))^2)
si
ti
ti - unique(measles$Mitotal
ti - unique(measles$Mitotal
ti - unique(measles$Mitotal)
# Using formula 5.29
sr <- 1 / (10 -1) * sum((ybh_r * sum(unique(measles$Mitotal)) - ybh*sum(unique(measles$Mitotal)))^2)
sr
# Using formula 5.29
sr <-
1 / (10 - 1) *
sum((ybh_r * sum(unique(measles$Mitotal)) - ybh * sum(unique(measles$Mitotal)))^2)
(ybh_r * sum(unique(measles$Mitotal)) - ybh * sum(unique(measles$Mitotal)
(ybh_r * sum(unique(measles$Mitotal)) - ybh * sum(unique(measles$Mitotal))
(ybh_r * sum(unique(measles$Mitotal)) - ybh * sum(unique(measles$Mitotal)))
;l
(ybh_r * sum(unique(measles$Mitotal)) - ybh * sum(unique(measles$Mitotal)))
(ybh * sum(unique(measles$Mitotal)) - ybh_r * sum(unique(measles$Mitotal)))
ti
ybh
sum(unique(measles$Mitotal) * ybh) / sum(unique(measles$Mitotal))
sum(unique(measles$Mitotal) * ybh) / sum(unique(measles$Mitotal)) * 100
ybar_smo <- ti_smo/Mi_smo
ti_smo <- sum(c(316.8, 89.4, 153.3, 540))
Mi_smo <- sum(c(792, 447, 511, 800))
ybar_smo <- ti_smo/Mi_smo
ybar_smo
Mi_smo/4
var(c(25, 15,20,40))
ti_smo - Mi_smo*ybar_smo
ti_smo
c(316.8, 89.4, 153.3, 540) - c(792, 447, 511, 800)*ybar_smo
var((316.8, 89.4, 153.3, 540) - c(792, 447, 511, 800)*ybar_smo)
var((316.8, 89.4, 153.3, 540) - c(792, 447, 511, 800)*ybar_smo))
var(c(316.8, 89.4, 153.3, 540) - c(792, 447, 511, 800)*ybar_smo))
var(c(316.8, 89.4, 153.3, 540) - c(792, 447, 511, 800)*ybar_smo)
10/25
0.4 * 0.6
