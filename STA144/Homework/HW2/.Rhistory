ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "dodge",
bins = 20,
alpha = 0.8
) #+ scale_fill_manual(values = c("#56B4E9", "#E69F00", "#56B4E9", "#999999"))
)
# Separated by Feedback Type
ggplotly(
ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "fill",
bins = 20,
alpha = 0.8
) #+ scale_fill_manual(values = c("#56B4E9", "#E69F00", "#56B4E9", "#999999"))
)
# Separated by Feedback Type
ggplotly(
ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "dodge",
bins = 20,
alpha = 0.8
) + scale_fill_manual(values = c("#56B4E9", "#E69F00", "#56B4E9", "#999999"))
)
# Separated by Feedback Type
ggplotly(
ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "dodge",
bins = 20,
alpha = 0.9
) + scale_fill_manual(values = c("#56B4E9", "#E69F00", "#999999"))
)
# Separated by Feedback Type
ggplotly(
ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "dodge",
bins = 17,
alpha = 0.9
) + scale_fill_manual(values = c("#56B4E9", "#E69F00", "#999999"))
)
# Separated by Feedback Type
ggplotly(
ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "dodge",
bins = 15,
alpha = 0.9
) + scale_fill_manual(values = c("#56B4E9", "#E69F00", "#999999"))
)
# Create Histograms,
# separated by Session
ggplotly(ggplot(mice, aes(x = Firing.Rate, fill = Session)) + geom_histogram(bins = 22, alpha = 0.8) + labs(x = "Firing Rate", y = "Count", fill = "Session", title = "Histograms of Firing Rates Colored by Session"))
# Separated by Feedback Type
ggplotly(
ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "dodge",
bins = 15,
alpha = 0.9
) + scale_fill_manual(values = c("#56B4E9", "#E69F00", "#999999") + labs(x = "Firing Rate", y = "Count", fill = "Feedback Type", title = "Histograms of Firing Rates Colored by Feedback Type"))
)
# Separated by Feedback Type
ggplotly(
ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "dodge",
bins = 15,
alpha = 0.9
) + scale_fill_manual(values = c("#56B4E9", "#E69F00", "#999999")) + labs(x = "Firing Rate", y = "Count", fill = "Feedback Type", title = "Histograms of Firing Rates Colored by Feedback Type"))
# Separated by Feedback Type
ggplotly(
ggplot(mice, aes(x = Firing.Rate, fill = Feedback_Type)) + geom_histogram(
position = "dodge",
bins = 15,
alpha = 0.9
) + scale_fill_manual(values = c("#56B4E9", "#E69F00", "#999999")) + labs(x = "Firing Rate", y = "Count", fill = "Feedback Type", title = "Histograms of Firing Rates Colored by Feedback Type")
)
1 - pnorm(0.95 / 4)
1 - pnorm(0.95) / 4)
1 - pnorm(0.95) / 4
1 - qnorm(0.95) / 4
1 - (qnorm(0.95) / 4)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) *
1 - (qnorm(0.95) / 4)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
1 - ((k - u) / 4)
# \mu
u <- seq(0, 5, 0.5)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
1 - ((k - u) / 4)
power <- 1 - ((k - u) *sqrt(4))
plot(u, power)
power <- 1 - ((k - u) *sqrt(10))
plot(u, power)
power <- 1 - ((k - u) *sqrt(4))
plot(u, power)
norm(0.95)
1norm(0.95)
qnorm(0.95)
((k - u) *sqrt(4))
pnorm(((k - u) *sqrt(4)))
power <- 1 - pnorm(((k - u) *sqrt(4)))
library(ggplot2)
# \mu
u <- seq(0, 5, 0.5)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(4)))
plot(u, power)
library(ggplot2)
# \mu
u <- seq(0, 5, 0.5)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(10)))
plot(u, power)
library(ggplot2)
# \mu
u <- seq(0, 5, 0.5)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(4)))
plot(u, power)
library(ggplot2)
# \mu
u <- seq(0, 2, 0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(4)))
plot(u, power)
ggplot() + aes(x = u, y = power) + geom_line()
library(ggplot2)
# \mu
u <- seq(-1, 2, 0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power <- 1 - pnorm(((k - u) *sqrt(4)))
plot(u, power)
ggplot() + aes(x = u, y = power) + geom_line()
power4 <- 1 - pnorm(((k - u) *sqrt(4)))
power4 <- 1 - pnorm(((k - u) *sqrt(4)))plot(u, power)
power4 <- 1 - pnorm(((k - u) *sqrt(4)))
power4 <- 1 - pnorm(((k - u) *sqrt(4)))
library(ggplot2)
# \mu
u <- seq(-1, 2, 0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power1 <- 1 - pnorm(((k - u) *sqrt(1)))
power4 <- 1 - pnorm(((k - u) *sqrt(4)))
power16 <- 1 - pnorm(((k - u) *sqrt(16)))
power64<- 1 - pnorm(((k - u) *sqrt(64)))
power100 <- 1 - pnorm(((k - u) *sqrt(100)))
#plot(u, power)
ggplot() + aes(x = u, y = power1) + geom_line() + geom_line(aes(x = u, power = power4))
ggplot() +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, power = power4))
powerN <- cbind(u, power1, power4, power16, power64, power100)
powerN
ggplot(powerN) +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, power = power4))
#plot(u, power)
class(powerN)
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplot(powerN) +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, power = power4))
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, power = power4))
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(aes(x = u, y = power1)) + geom_line(aes(x = u, y = power4))
ggplot(powerN,aes(x = u, y = power1)) +  geom_line() + geom_line(aes(x = u, y = power4))
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange")
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow")
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green")
ggplot(powerN,aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue")
library(ggplot2)
library(plotly)
# \mu
u <- seq(-1, 2, 0.05)
# std normal for mean 0 and sigma = 1
k <- qnorm(0.95) * 1 / 4
power1 <- 1 - pnorm(((k - u) * sqrt(1)))
power4 <- 1 - pnorm(((k - u) * sqrt(4)))
power16 <- 1 - pnorm(((k - u) * sqrt(16)))
power64 <- 1 - pnorm(((k - u) * sqrt(64)))
power100 <- 1 - pnorm(((k - u) * sqrt(100)))
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplotly(ggplot(powerN, aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue"))
k1 <- qnorm(0.95)
k1 <- qnorm(0.95)power1 <- 1 - pnorm(((k - u) * sqrt(1)))
library(ggplot2)
library(plotly)
# \mu
u <- seq(-1, 2, 0.05)
# std normal for mean 0 and sigma = 1
k1 <- qnorm(0.95) / sqrt(1)
k4 <- qnorm(0.95)/ sqrt(4)
k16 <- qnorm(0.95) / sqrt(16)
k64 <- qnorm(0.95) / sqrt(64)
k100 <- qnorm(0.95) / sqrt(100)
power1 <- 1 - pnorm(((k1 - u) * sqrt(1)))
power4 <- 1 - pnorm(((k4 - u) * sqrt(4)))
power16 <- 1 - pnorm(((k16 - u) * sqrt(16)))
power64 <- 1 - pnorm(((k64 - u) * sqrt(64)))
power100 <- 1 - pnorm(((k100 - u) * sqrt(100)))
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplotly(ggplot(powerN, aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue"))
library(ggplot2)
library(plotly)
# \mu
u <- seq(-1, 4, 0.05)
# std normal for mean 0 and sigma = 1
k1 <- qnorm(0.95) / sqrt(1)
k4 <- qnorm(0.95)/ sqrt(4)
k16 <- qnorm(0.95) / sqrt(16)
k64 <- qnorm(0.95) / sqrt(64)
k100 <- qnorm(0.95) / sqrt(100)
power1 <- 1 - pnorm(((k1 - u) * sqrt(1)))
power4 <- 1 - pnorm(((k4 - u) * sqrt(4)))
power16 <- 1 - pnorm(((k16 - u) * sqrt(16)))
power64 <- 1 - pnorm(((k64 - u) * sqrt(64)))
power100 <- 1 - pnorm(((k100 - u) * sqrt(100)))
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplotly(ggplot(powerN, aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue"))
# two sided test
k1 <- (qnorm(0.975) / sqrt(1)) - (qnorm(0.025)/sqrt(1))
k4 <-(qnorm(0.975) / sqrt(4)) - (qnorm(0.025)/sqrt(4))
k16 <- (qnorm(0.975) / sqrt(16)) - (qnorm(0.025)/sqrt(16))
k64 <- (qnorm(0.975) / sqrt(64)) - (qnorm(0.025)/sqrt(64))
k100 <- (qnorm(0.975) / sqrt(100)) - (qnorm(0.025)/sqrt(100))
power1 <- 1 - pnorm(((k1 - u) * sqrt(1)))
power4 <- 1 - pnorm(((k4 - u) * sqrt(4)))
power16 <- 1 - pnorm(((k16 - u) * sqrt(16)))
power64 <- 1 - pnorm(((k64 - u) * sqrt(64)))
power100 <- 1 - pnorm(((k100 - u) * sqrt(100)))
powerN <- as.data.frame(cbind(u, power1, power4, power16, power64, power100))
#plot(u, power)
class(powerN)
ggplotly(ggplot(powerN, aes(x = u, y = power1)) +  geom_line(color = "red") + geom_line(aes(x = u, y = power4), color = "orange") + geom_line(aes(x = u, y = power16), color = "yellow") + geom_line(aes(x = u, y = power64), color = "green") + geom_line(aes(x = u, y = power100), color = "blue"))
library(lme4)
;ibrary(ggplot2)
data(ChickWeight)
force(ChickWeight)
head(ChickWeight)
# (a). (Type your code in the space below, if any)
summary(ChickWeight)
table(ChickWeight$Chick)
table(ChickWeight$Chick)
# (a). (Type your code in the space below, if any)
summary(ChickWeight)
attributes(ChickWeight)
?ChickWeight
# (a). (Type your code in the space below, if any)
summary(ChickWeight)
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, color = Diet)) + geom_curve()
library(lme4)
library(ggplot2)
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, color = Diet)) + geom_curve()
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, color = Diet)) + geom_line()
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, group= Chick, color = Diet)) + geom_line()
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, group= Chick, color = Diet)) + geom_line(color = c("black", "red", "green", "blue"))
ChickWeight
View(ChickWeight)
# (b). (Type your code in the space below, if any)
ggplot(data = ChickWeight, aes(x = Time, y = weight, group= Chick, color = Diet)) + geom_line() + scale_color_manual(values = c("black", "red", "green", "blue"))
library(plotly)
# (b). (Type your code in the space below, if any)
ggplotly(ggplot(data = ChickWeight, aes(x = Time, y = weight, group= Chick, color = Diet)) + geom_line() + scale_color_manual(values = c("black", "red", "green", "blue")))
# (c). (Type your code in the space below, if any)
chick.day20 <- ChickWeight[,ChickWeight$Time == 20]
# (c). (Type your code in the space below, if any)
chick.day20 <- ChickWeight[ChickWeight$Time == 20,]
chick.day20
aov(weight ~ Diet, data = chick.day20)
mod1 <_ aov(weight ~ Diet, data = chick.day20)
mod1 <- aov(weight ~ Diet, data = chick.day20)
summary(mod1)
summary(mod1)
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mode1)
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mod1)
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mod1, whcih = c(2,4))
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mod1, which = c(2,4))
# (d). (Type your code in the space below, if any)
# Checking normality and equal var
plot(mod1, which = c(2,5))
# (e). (Type your code in the space below, if any)
unique(ChickWeight$Time)
aov(weight ~ Time*Diet, data = chick.day20)
summary(mod2)
# (e). (Type your code in the space below, if any)
unique(ChickWeight$Time)
mod2 <- aov(weight ~ Time*Diet, data = chick.day20)
summary(mod2)
summary(mod2)
anova(mod2)
anova(mod2)
mod2 <- aov(weight ~ Time:Diet, data = chick.day20)
anova(mod2)
mod2 <- aov(weight ~ Time*Diet, data = chick.day20)
anova(mod2)
mod2 <- aov(weight ~ Time + Diet, data = chick.day20)
anova(mod2)
summary(mod1)
mod1 <- aov(weight ~ Diet, data = chick.day20)
summary(mod1)
mod2 <- aov(weight ~ Time + Diet, data = chick.day20)
anova(mod2)
mod2 <- aov(weight ~ Time + Diet, data = ChickWeight)
mod2 <- aov(weight ~ Time * Diet, data = ChickWeight)
anova(mod2)
# (e). (Type your code in the space below, if any)
length(unique(ChickWeight$Time))
# (f). (Type your code in the space below, if any)
mod3 <- lmer(weight ~ Time * Diet + (1|Chick))
# (f). (Type your code in the space below, if any)
mod3 <- lmer(weight ~ Time * Diet + (1|Chick), data = ChickWeight)
mod3
mod2 <- aov(weight ~ as.factor(Time) * Diet, data = ChickWeight)
anova(mod2)
# (f). (Type your code in the space below, if any)
mod3 <- lmer(weight ~ Time * Diet + (1|Chick), data = ChickWeight)
summary(mod3)
mod2.red <- aov(weight ~ as.factor(Time) + Diet, data = ChickWeight)
anova(mod2, mod2.red)
# (f). (Type your code in the space below, if any)
mod3 <- lmer(weight ~ Time * Diet + (1|Chick), data = ChickWeight)
summary(mod3)
mod3.other <- lmer(weight ~ Time * Diet + (1 + Time|Chick), data = ChickWeight)
summary(mode.other)
summary(mod3.other)
sum(c(3, 5, 1, 2, 6, 1, 2, 3, 1, 7, 2, 0, 6, 2, 1, 1
))
mean(c(3, 5, 1, 2, 6, 1, 2, 3, 1, 7, 2, 0, 6, 2, 1, 1
))
setwd("C:/Users/Gianni/Documents/Github/MStats/STA144/Homework/HW2")
data.frame("Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"))
kable(data.frame("Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"), "Prob" = rep(1/6, 6)))
library(knitr)
kable(data.frame("Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"), "Prob" = rep(1/6, 6)))
kable(data.frame("Stratum" = rep(1, 6), Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"), "Prob" = rep(1/6, 6)))
kable(data.frame("Stratum" = rep(1, 6), Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"), "Prob" = rep(1/6, 6)))
kable(data.frame("Stratum" = rep(1, 6), "Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"), "Prob" = rep(1/6, 6)))
kable(data.frame("Stratum" = rep(2, 6), "Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"), "Prob" = rep(1/6, 6)))
library(knitr)
kable(data.frame(
"Stratum" = rep(1, 6),
"Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"),
"Prob" = rep(1 / 6, 6)
))
kable(data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6)
))
kable(data.frame(
"Stratum" = rep(1, 6),
"Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8))
))
kable(data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7))
))
kable(data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = rep(1/6, 6)
))
kable(data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA))
))
kable(data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA)
))
combDF <- rbind(data.frame(
"Stratum" = rep(1, 6),
"Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
), data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA)
))
combDF <- rbind(data.frame(
"Stratum" = rep(1, 6),
"Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
), data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA)
))
combDF <- cbind(data.frame(
"Stratum" = rep(1, 6),
"Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
), data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA)
))
combDF
combDF <- cbind(data.frame(
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
), data.frame(
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA)
))
combDF
combDF <- cbind(data.frame(
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
), data.frame(
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA), "P(t1 and t2)" = rep(1/12, 12)
))
combDF
combDF <- cbind(data.frame(
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
), data.frame(
"hat(t_str2)" = c(rep(22,6), rep(28,6)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA), "P(t1 and t2)" = rep(1/12, 12)
))
combDF
combDF <- cbind(data.frame(
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
), data.frame(
"hat(t_str2)" = c(rep(22,6), rep(28,6)),
"P(hat(t_str2)" = rep(1/2, 12), "P(t1 and t2)" = rep(1/12, 12)
))
combDF
kable(data.frame(
"Stratum" = rep(1, 6),
"Samples" = c("[1,2]", "[1,3]", "[1,8]", "[2,3]", "[2,8]", "[3,8]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
))
kable(data.frame(
"Stratum" = rep(2, 6),
"Samples" = c("[4,5]", "[4,6]", "[4,7]", "[5,6]", "[5,7]", "[6,7]"),
"Prob" = rep(1 / 6, 6),
"hat(t_str2)" = c(2*(4+7), 2*(4+7), 2*(4+7), 2*(7+7), 2*(7+7), 2*(7+7)),
"P(hat(t_str2)" = c(1/2, NA, NA, 1/2, NA, NA)
))
combDF <- cbind(data.frame(
"hat(t_str1)" = c(2*(1+2), 2*(1+4), 2*(1+8), 2*(2+4), 2*(2+8), 2*(4+8)),
"P(hat(t_str1)" = rep(1/6, 6)
), data.frame(
"hat(t_str2)" = c(rep(22,6), rep(28,6)),
"P(hat(t_str2)" = rep(1/2, 12), "P(t1 and t2)" = rep(1/12, 12)
))
combDF["t1+t2"] = combDF$hat.t_str1. + combDF$hat.t_str2.
combDF
mean(combDF$`t1+t2`)
var(combDF$`t1+t2`)
sum((combDF$`t1+t2` - 40)^2 * combDF$P.t1.and.t2.)
# Population mean (ybarU) is
1/6 * (66 + 59 + 70 + 83 + 82 + 71)
# Population mean (ybarU) is
mean(c(66 + 59 + 70 + 83 + 82 + 71))
# Population mean (ybarU) is
mean(c(66 + 59 + 70 + 83 + 82 + 71))
# Population mean (ybarU) is
mean(c(66 , 59 , 70 , 83 , 82 , 71))
#Population Variance S2
var(c(66 , 59 , 70 , 83 , 82 , 71))
choose(6, 4)
